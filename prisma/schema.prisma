// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  TEACHER
  STUDENT
}

enum OptionLabel {
  A
  B
  C
  D
  E
}

model User {
  id        String    @id @default(uuid())
  name      String
  username  String    @unique
  password  String
  role      Role      @default(STUDENT)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  answer Answer[]
  token  Token[]
}

model Question {
  id           String    @id @default(uuid())
  questionText String    @unique
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  options Option[]
  answer  Answer[]
}

model Option {
  id         String      @id @default(uuid())
  questionId String
  optionText String
  optionType OptionLabel
  isCorrect  Boolean     @default(false)
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  deletedAt  DateTime?   @map("deleted_at")

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers  Answer[] // Bu seçeneği seçen cevaplar
}

model Answer {
  id         String   @id @default(uuid())
  userId     String
  questionId String
  optionId   String
  isCorrect  Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  option   Option   @relation(fields: [optionId], references: [id], onDelete: SetNull)
}

model Token {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  expiresAt DateTime  @map("expires_at")
  revokedAt DateTime? @map("revoked_at")

  user User @relation(fields: [userId], references: [id])

  @@map("tokens")
}
